/* StreamSqlParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. StreamSqlParserTokenManager.java */
package org.yamcs.yarch.streamsql;
import java.io.Reader;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.yamcs.yarch.*;
import org.yamcs.yarch.TableWriter.InsertMode;

/** Token Manager. */
@SuppressWarnings("unused")public class StreamSqlParserTokenManager implements StreamSqlParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100000000000000L) != 0L)
            return 10;
         if ((active1 & 0x800000000000000L) != 0L)
            return 13;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x1fffffffffL) != 0L)
         {
            jjmatchedKind = 109;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x3e03fe0000031800L) != 0L)
            return 32;
         if ((active0 & 0xc1fc01fffffce7e0L) != 0L || (active1 & 0x1fffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 1;
            }
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x359879fffffee160L) != 0L || (active1 & 0x1effffecffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0xc065800000001680L) != 0L || (active1 & 0x100001300L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x589002149060040L) != 0L || (active1 & 0x80e006262L) != 0L)
            return 32;
         if ((active0 & 0xb01079deb6f8e120L) != 0L || (active1 & 0x16f1ff8c9dL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 3;
            }
            return 32;
         }
         return -1;
      case 4:
         if ((active1 & 0x4040000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 4;
            }
            return 21;
         }
         if ((active0 & 0x1110185000080100L) != 0L || (active1 & 0x1601c28010L) != 0L)
            return 32;
         if ((active0 & 0xa000618eb6f0e020L) != 0L || (active1 & 0xf8390c8dL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 4;
            }
            return 32;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000010012d0a020L) != 0L || (active1 & 0x801008dL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 5;
            }
            return 32;
         }
         if ((active0 & 0x800000000L) != 0L || (active1 & 0x4840000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 5;
            }
            return 21;
         }
         if ((active0 & 0x80006086a4204000L) != 0L || (active1 & 0xf1380c00L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x2c0a020L) != 0L || (active1 & 0x100084L) != 0L)
            return 32;
         if ((active0 & 0x400800000000L) != 0L || (active1 & 0x4840000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
            return 21;
         }
         if ((active0 & 0x2000010010100000L) != 0L || (active1 & 0x8010009L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
            return 32;
         }
         return -1;
      case 7:
         if ((active0 & 0x400800000000L) != 0L || (active1 & 0x4840000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
            return 21;
         }
         if ((active0 & 0x2000000010000000L) != 0L || (active1 & 0x10008L) != 0L)
            return 32;
         if ((active0 & 0x10000100000L) != 0L || (active1 & 0x8000001L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
            return 32;
         }
         return -1;
      case 8:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active0 & 0x400800000000L) != 0L || (active1 & 0x4840000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 8;
            return 21;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x8000001L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x100000L) != 0L)
            return 32;
         if ((active0 & 0x400800000000L) != 0L || (active1 & 0x4840000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 9;
            return 21;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000L) != 0L)
            return 21;
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x4840000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 10;
            return 21;
         }
         return -1;
      case 11:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 11;
            return 21;
         }
         if ((active1 & 0x840000L) != 0L)
            return 21;
         return -1;
      case 12:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 12;
            return 21;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 21;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 124);
      case 40:
         return jjStopAtPos(0, 113);
      case 41:
         return jjStopAtPos(0, 114);
      case 42:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L);
      case 43:
         return jjStopAtPos(0, 119);
      case 44:
         return jjStopAtPos(0, 115);
      case 45:
         return jjStartNfaWithStates_0(0, 120, 10);
      case 47:
         return jjStartNfaWithStates_0(0, 123, 13);
      case 59:
         return jjStopAtPos(0, 117);
      case 60:
         return jjStopAtPos(0, 126);
      case 61:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L);
      case 62:
         return jjStopAtPos(0, 125);
      case 91:
         return jjStopAtPos(0, 128);
      case 93:
         return jjStopAtPos(0, 129);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1fe0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3e000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7c0000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7f800000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x780000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xfe00000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfL);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ffc00L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc00000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 62:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001800000L, active1, 0x401c00411L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000e002000L, active1, 0x18e0L);
      case 70:
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x180000c000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8010810004000L, active1, 0xe002000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000080180L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x401f80180000600L, active1, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000020108000L, active1, 0x302L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0020000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3000006040200000L, active1, 0xcL);
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x200001000L, active1, 0x300000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c0000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc180000000400000L, active1, 0x10000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 124:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40040L, active1, 0x10060L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c00000L);
      case 67:
      case 99:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x202000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 32);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000100000000000L, active1, 0x40000000L);
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x1800060000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000400000000L, active1, 0x220000004L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x580000004000000L, active1, 0x400000800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0xe000400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x7040088000L, active1, 0xc008L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000400000L, active1, 0x380003L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x610018000000L, active1, 0x80000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 32);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000001822100L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000020L, active1, 0x80L);
      case 87:
      case 119:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 32);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 32);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200a04020L, active1, 0x40000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 32);
         break;
      case 68:
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 32);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 32);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 32);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 32);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 32);
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000700804000100L, active1, 0x8c1a0880L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000000000000L, active1, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8082000000L, active1, 0x200000L);
      case 76:
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000008000L, active1, 0x11c10000L);
      case 77:
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 32);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 78:
      case 110:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 32);
         break;
      case 80:
      case 112:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 32);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000100000L, active1, 0x40400L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L);
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x1000008000L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x400080000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x10010000000L, active1, 0x9L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000000L, active1, 0x400000000L);
      case 87:
      case 119:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4040000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180004L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 68:
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x800800000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 32);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 32);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 32);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 32);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x40a000L, active1, 0x11800000L);
      case 71:
      case 103:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 32);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000010000000L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x10400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8080000020L, active1, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x8L);
      case 80:
      case 112:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 32);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x600000104000L, active1, 0x80000080L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 32);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x404200000L, active1, 0x40000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x20000000L);
      case 88:
      case 120:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x800000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2008000L, active1, 0x4000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40008L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 32);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 32);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 32);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 32);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 32);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 32);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x102000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 32);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0x10000L);
      case 77:
      case 109:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000010400000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 32);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 32);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 32);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 32);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x8000001L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x8000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 32);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 32);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 32);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 32);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4010000L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 32);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 89:
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x410000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 70:
      case 102:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 32);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 32);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800001L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 32);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 32);
         break;
      case 78:
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 32);
         break;
      case 80:
      case 112:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 20, 32);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0x40000L);
      case 89:
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 82, 21);
         break;
      case 84:
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 87, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 46, 21);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(13, 90, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
               case 21:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAdd(21); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddStates(0, 5); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(23, 24); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(6, 7); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 0:
                  if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAddStates(6, 8); }
                  break;
               case 2:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar != 39)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(9, 7); }
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(9, 7); }
                  break;
               case 10:
                  if (curChar != 45)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 14:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 15:
                  if (curChar == 42)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 16:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 15); }
                  break;
               case 17:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 15); }
                  break;
               case 18:
                  if (curChar == 47 && kind > 108)
                     kind = 108;
                  break;
               case 19:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 22:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 24:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddStates(0, 5); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(26); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 0); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(30); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     { jjCheckNAdd(21); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     { jjCheckNAddTwoStates(20, 21); }
                  }
                  break;
               case 5:
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 9:
                  { jjCheckNAddTwoStates(9, 7); }
                  break;
               case 11:
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
               case 17:
                  { jjCheckNAddTwoStates(17, 15); }
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAdd(21); }
                  break;
               case 23:
                  { jjAddStates(15, 16); }
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(9, 7); }
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(17, 15); }
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   26, 27, 0, 28, 29, 30, 1, 2, 3, 15, 16, 18, 28, 29, 30, 23, 
   24, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\54", "\75", "\73", "\52\52", "\53", "\55", "\174\174", 
"\52", "\57", "\41", "\76", "\74", "\75\76", "\133", "\135", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public StreamSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public StreamSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffff247fffffffffL, 0x3L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x180000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x180000000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[32];
    private final int[] jjstateSet = new int[2 * 32];

    
    protected char curChar;
}
